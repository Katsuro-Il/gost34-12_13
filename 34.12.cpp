#include <iostream>
#include "34.12.hpp"

using namespace GOST_34_12;

const uint8_t Kuzn::s_Pi[256] = {
  0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
  0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
  0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
  0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
  0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
  0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
  0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
  0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
  0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
  0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
  0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
  0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
  0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
  0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
  0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
  0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6 };

const uint8_t Kuzn::s_reverse_Pi[256] = {
  0xA5, 0x2D, 0x32, 0x8F, 0x0E, 0x30, 0x38, 0xC0, 0x54, 0xE6, 0x9E, 0x39, 0x55, 0x7E, 0x52, 0x91,
  0x64, 0x03, 0x57, 0x5A, 0x1C, 0x60, 0x07, 0x18, 0x21, 0x72, 0xA8, 0xD1, 0x29, 0xC6, 0xA4, 0x3F,
  0xE0, 0x27, 0x8D, 0x0C, 0x82, 0xEA, 0xAE, 0xB4, 0x9A, 0x63, 0x49, 0xE5, 0x42, 0xE4, 0x15, 0xB7,
  0xC8, 0x06, 0x70, 0x9D, 0x41, 0x75, 0x19, 0xC9, 0xAA, 0xFC, 0x4D, 0xBF, 0x2A, 0x73, 0x84, 0xD5,
  0xC3, 0xAF, 0x2B, 0x86, 0xA7, 0xB1, 0xB2, 0x5B, 0x46, 0xD3, 0x9F, 0xFD, 0xD4, 0x0F, 0x9C, 0x2F,
  0x9B, 0x43, 0xEF, 0xD9, 0x79, 0xB6, 0x53, 0x7F, 0xC1, 0xF0, 0x23, 0xE7, 0x25, 0x5E, 0xB5, 0x1E,
  0xA2, 0xDF, 0xA6, 0xFE, 0xAC, 0x22, 0xF9, 0xE2, 0x4A, 0xBC, 0x35, 0xCA, 0xEE, 0x78, 0x05, 0x6B,
  0x51, 0xE1, 0x59, 0xA3, 0xF2, 0x71, 0x56, 0x11, 0x6A, 0x89, 0x94, 0x65, 0x8C, 0xBB, 0x77, 0x3C,
  0x7B, 0x28, 0xAB, 0xD2, 0x31, 0xDE, 0xC4, 0x5F, 0xCC, 0xCF, 0x76, 0x2C, 0xB8, 0xD8, 0x2E, 0x36,
  0xDB, 0x69, 0xB3, 0x14, 0x95, 0xBE, 0x62, 0xA1, 0x3B, 0x16, 0x66, 0xE9, 0x5C, 0x6C, 0x6D, 0xAD,
  0x37, 0x61, 0x4B, 0xB9, 0xE3, 0xBA, 0xF1, 0xA0, 0x85, 0x83, 0xDA, 0x47, 0xC5, 0xB0, 0x33, 0xFA,
  0x96, 0x6F, 0x6E, 0xC2, 0xF6, 0x50, 0xFF, 0x5D, 0xA9, 0x8E, 0x17, 0x1B, 0x97, 0x7D, 0xEC, 0x58,
  0xF7, 0x1F, 0xFB, 0x7C, 0x09, 0x0D, 0x7A, 0x67, 0x45, 0x87, 0xDC, 0xE8, 0x4F, 0x1D, 0x4E, 0x04,
  0xEB, 0xF8, 0xF3, 0x3E, 0x3D, 0xBD, 0x8A, 0x88, 0xDD, 0xCD, 0x0B, 0x13, 0x98, 0x02, 0x93, 0x80,
  0x90, 0xD0, 0x24, 0x34, 0xCB, 0xED, 0xF4, 0xCE, 0x99, 0x10, 0x44, 0x40, 0x92, 0x3A, 0x01, 0x26,
  0x12, 0x1A, 0x48, 0x68, 0xF5, 0x81, 0x8B, 0xC7, 0xD6, 0x20, 0x0A, 0x08, 0x00, 0x4C, 0xD7, 0x74 };

const Block128 Kuzn::s_lVec{ "0194208510C2C001FB01C0C210852094" };
std::array<Block128, 32> Kuzn::s_constVec;
bool Kuzn::s_constGenerated = false;

Kuzn::Kuzn(const Block128 &key1, const Block128 &key2) {
  m_keyVec[0] = (key1);
  m_keyVec[1] = (key2);
  
  constGen();
  keyGen();
}

bool Kuzn::read(std::ifstream &f, Block128 &block) const {
  f.read(reinterpret_cast<char *>(&block[0]), 2 * sizeof(Chunk));
  const uint8_t readBytes = f.gcount();
  
  for (auto i = readBytes; i < 2 * sizeof(Chunk); ++i) { // если считанное количество информации < двух чанков
    block(i) = (i == readBytes) ? 1 : 0; // добавляем 1 и добиваем нулями до необх. размера
  }
  
  if (readBytes > 0) {
    return true;
  }
  
  return false;
}

void Kuzn::write(std::ofstream &f, const Block128 &block) const {
  f.write(reinterpret_cast<const char *>(&block[0]), 2 * sizeof(Chunk));
}

Block128 Kuzn::Xor(const Block128 &a, const Block128 &b) const {
  return Block128 { a[0] ^ b[0], a[1] ^ b[1] };
}

void Kuzn::encode(const std::string &path) const {
  std::ifstream plainFile(path, std::ios::binary);
  std::ofstream cryptedFile(path + ".txt", std::ios::binary);
  
  //std::cout << plainFile.is_open() << std::endl;
  Block128 block;
  
  while (read(plainFile, block))
    write(cryptedFile, encodeBlock(block));
  
  plainFile.close();
  cryptedFile.close();
}

Block128 Kuzn::encodeBlock(Block128 block) const {
  for (uint8_t i = 0; i < 9; ++i) {
    block = L(S(Xor(block, m_keyVec[i])));
  }
  
  return Xor(block, m_keyVec[9]);
}

void Kuzn::decode(const std::string &path) const {
  std::ifstream cryptedFile(path, std::ios::binary);
  std::ofstream plainFile(path + ".txt", std::ios::binary);
  
  //std::cout << cryptedFile.is_open() << std::endl;
  Block128 block;
  
  while (read(cryptedFile, block))
    write(plainFile, decodeBlock(block));
  
  cryptedFile.close();
  plainFile.close();
}

Block128 Kuzn::decodeBlock(Block128 block) const {
  block = Xor(block, m_keyVec[9]);
  
  for (int i = 8; i >= 0; --i) {
    block = Xor(reverseS(reverseL(block)), m_keyVec[i]);
  }
  
  return block;
}

uint8_t Kuzn::multGalois(uint8_t a, uint8_t b) const {
  uint8_t res{ 0 };
  
  for (; b; b >>= 1) {
    if (b & 1) {
      res ^= a;
    }
    
    if (a & 0x80) {
      a = (a << 1) ^ 0xc3; //полином  x^8 + x^7 + x^6 + x + 1
    } else {
      a <<= 1;
    }
  }
  
  return res;
}

Block128 Kuzn::R(const Block128 &state) const {
  uint8_t a0 = 0;
  Block128 data;
  
  for (int i = 15; i >= 0; --i) {
    if (i == 15) {
      data(0) = state(0);
    } else {
      data(i + 1) = state(i);
    }
    
    a0 ^= multGalois(state(i), s_lVec(i));
  }
  
  data(0) = a0;
  return data;
}

Block128 Kuzn::L(const uint8_t &iter) const {
  Block128 block;
  
  block(15) = iter;
  return L(block);
}

Block128 Kuzn::L(const Block128 &block) const {
  Block128 result = block;
  
  for (uint8_t i = 0; i <= 15; ++i) {
    result = R(result);
  }
  
  return result;
}

void Kuzn::constGen() {
  if (s_constGenerated) {
    return;
  }
  
  for (uint8_t i = 1; i <= 32; ++i) {
    s_constVec[i - 1] = L(i);
  }
  
  s_constGenerated = true;
}

void Kuzn::keyGen() {
  std::pair<Block128, Block128> keys = { m_keyVec[0], m_keyVec[1] };
  
  for (uint8_t i = 0; i < 4; ++i) {
    for (uint8_t j = 0; j < 8; ++j) {
      keys = F(keys.first, keys.second, s_constVec[8 * i + j]);
    }
    
    m_keyVec[2 + i * 2] = keys.first;
    m_keyVec[3 + i * 2] = keys.second;
  }
}

Block128 Kuzn::S(const Block128 &block) const {
  Block128 result;
  
  for (uint8_t i = 0; i <= 15; ++i) {
    result(i) = s_Pi[block(i)];
  }
  
  return result;
}

Block128 Kuzn::reverseR(const Block128 &state) const {
  uint8_t a15 = state(0);
  Block128 data;
  
  for (int i = 1; i < 16; ++i) {
    const auto j = 15 - i;
    data(j) = state(j + 1);
    a15 ^= multGalois(data(j), s_lVec(j));
  }
  
  data(15) = a15;
  return data;
}

Block128 Kuzn::reverseL(const Block128 &in_data) const {
  Block128 out_data = in_data;
  
  for (int i = 0; i < 16; ++i) {
    out_data = reverseR(out_data);
  }
  
  return out_data;
}

Block128 Kuzn::reverseS(const Block128 &block) const {
  Block128 result;
  
  for (uint8_t i = 0; i <= 15; ++i) {
    result(i) = s_reverse_Pi[block(i)];
  }
  
  return result;
}

std::pair<Block128, Block128> Kuzn::F(const Block128 &key1, const Block128 &key2, const Block128 &iterConst) {
  return { Xor(L(S(Xor(key1, iterConst))), key2), key1 };
}
